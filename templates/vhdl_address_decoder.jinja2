-- Automatically generated by WhishList - https://github.com/mvsoliveira/wishlist/
-- Package name: {{ name.lower() }}_pkg
-- Description : {{ description }}

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.{{ name.lower() }}_pkg.all;

entity {{ name.lower() }}_address_decoder is
port(
    clk_i : in std_logic;
    read_i : in std_logic;
    write_i : in std_logic;
    address_i : in std_logic_vector({{ address_width-1 }} downto 0);
    data_i : in std_logic_vector({{ address_width-1 }} downto 0);
    data_o : out std_logic_vector({{ address_width-1 }} downto 0);
    {{ name.lower() }}_status_i : in {{ name.lower() }}_status_record_type;
    {{ name.lower() }}_control_o : out {{ name.lower() }}_control_record_type

);
end entity {{ name.lower() }}_address_decoder;


architecture rtl of {{ name.lower() }}_address_decoder is

signal int_{{ name.lower() }}_control : {{ name.lower() }}_control_record_type;
signal int_{{ name.lower() }}_status : {{ name.lower() }}_status_record_type;

begin

{{ name.lower() }}_control_o <= int_{{ name.lower() }}_control;
int_{{ name.lower() }}_status <= {{ name.lower() }}_status_i;

address_decoder_p : process (clk_i) is
begin
    if rising_edge(clk_i) then
{#- Iterating status and control registers #}
{%- for permission_regex, direction, strobe in (('^rw?$','status','read'),('^rw$','control','write')) %}
        if ({{ strobe }}_i = '1') then
            case address_i is
    {%- set df = address_decoder[address_decoder.permission.str.match(permission_regex)] %}
    {%- for address in np.sort(df.address.unique()) %}
                when X"{{ get_address_string(address) }}" =>
        {%- for i, row in df[df.address==address].iterrows() %}
                {%- if direction == 'control' %}
                    int_{{ row.vhdl_member_name }}{{ get_vhdl_bit_string(row.register_bits_lists, side='signal') }} <= data_i{{ get_vhdl_bit_string(row.address_bits_lists,side='address') }};
            {%- else %}
                    data_o{{ get_vhdl_bit_string(row.address_bits_lists,side='address') }} <= int_{{ row.vhdl_member_name }}{{ get_vhdl_bit_string(row.register_bits_lists,side='signal') }};
            {%- endif %}
        {%- endfor %}
    {%- endfor %}
                when others => null;
            end case;
        end if;
{%- endfor %}
    end if;
end process address_decoder_p;

end architecture rtl;